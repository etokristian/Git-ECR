name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }} .
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          # Update ECS task definition
          ecs_task_definition=$(aws ecs describe-task-definition --task-definition my-app-task-def)
          new_task_definition=$(echo $ecs_task_definition | jq '.taskDefinition | .containerDefinitions[0].image = "'${{ secrets.AWS_ACCOUNT_ID }}'.dkr.ecr.'${{ secrets.AWS_REGION }}'.amazonaws.com/'${{ secrets.ECR_REPOSITORY }}':latest"')
          echo $new_task_definition > updated_task_def.json

          # Register the new ECS task definition
          aws ecs register-task-definition --cli-input-json file://updated_task_def.json

          # Update ECS service to use the new task definition
          aws ecs update-service --cluster my-cluster --service my-app-service --task-definition my-app-task-def
